# THanks https://github.com/fox-it/cisco-ios-xe-implant-detection
# quick and dirty script by UK_Daniel_Card (aka mRr3b00t)
# just to show how you can do this in PSH
# releated to an implant deployed by threat actrs using: 

# CVE-2023-20198 IOS XE Web UI PE
# CVE-2023-20109 Cisco IOS and IOS XE Group Encrypted Transport VPN Out-of-Bounds Write Vulnerability
# Hack4Good !
# HoLAI StealthHunter Update

# Advanced PowerShell Script for Cisco IOS XE Implant Detection

# Function to Check for Implant
function Check-Implant {
    param (
        [string]$targetUrl,
        [string]$knownHash
    )

    try {
        # Logging
        Write-Log "Checking target: $targetUrl"
        
        # Fetch web page content
        $response = Invoke-WebRequest -Uri $targetUrl -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::Chrome)
        $hash = Get-ContentHash -Content $response.Content

        # Verify hash
        if ($hash -eq $knownHash) {
            Write-Host "CISCO IOS XE Found" -ForegroundColor Green
            Write-Log "CISCO IOS XE Found at $targetUrl"
        } else {
            Write-Host "Implant Detected" -ForegroundColor Red
            Write-Log "Implant Detected at $targetUrl"
        }
    } catch {
        Write-Host "An error occurred: $_" -ForegroundColor Red
        Write-Log "An error occurred: $_"
    }
}

# Function to Get Content Hash
function Get-ContentHash {
    param (
        [string]$Content
    )
    
    $stream = [System.IO.MemoryStream]::new()
    $writer = [System.IO.StreamWriter]::new($stream)
    $writer.write($Content)
    $writer.Flush()
    $stream.Position = 0
    $hashObj = Get-FileHash -InputStream $stream -Algorithm MD5
    return $hashObj.Hash
}

# Function for Logging
function Write-Log {
    param (
        [string]$Message
    )
    
    Add-Content -Path "script.log" -Value "$(Get-Date) - $Message"
}

# Main Execution
# Read configurations from a JSON file
$config = Get-Content -Path "config.json" | ConvertFrom-Json

# Apply Trust All Certificates Policy
Add-Type -TypeDefinition @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

# Begin scanning
Write-Host "Starting scan..." -ForegroundColor Yellow
Write-Log "Scan started."

# Implement parallel execution if you have multiple targets
foreach ($target in $config.TargetUrls) {
    Check-Implant -targetUrl $target -knownHash $config.KnownHash
}

Write-Host "Scan complete." -ForegroundColor Yellow
Write-Log "Scan completed."

if($hash1 = "4ADA2BE6F16E1623DE939ACAE87EA6E7"){ write-host "Implant likely not in place" -ForegroundColor Green}else{write-host "Implant Detected" -ForegroundColor Red}

}
